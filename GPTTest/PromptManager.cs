namespace GPTProject.Core
{
	public static class PromptManager
	{
		public static string GetSystemPrompt(string subjectArea, List<string>? sources)
		{
			if (sources is null)
			{
				return "Пользователь задал некорректный вопрос. Ответь, что ты не можешь дать ответ, так как это выходит за рамки твоих возможностей.";
			}

			var systemPrompt = $"Вы интеллектуальный помощник, обученный на базе знаний по теме: \"{subjectArea}\"." +
				$" Ваша задача – предоставлять максимально точные, краткие и понятные ответы пользователям на основе информации из базы знаний. " +
				$"Не нужно пересказывать источники целиком – отвечайте именно на вопрос." +
				$"\r\nЕсли пользовательский вопрос имеет однозначный ответ в базе знаний, предоставьте его." +
				$"\r\nЕсли информации недостаточно, скажите: \"Мне не хватает знаний, чтобы ответить на этот вопрос.\" " +
				$"Избегайте предположений, не подтвержденных содержимым базы знаний." +
				$"\r\nОтвечайте в профессиональном и дружелюбном тоне." +
				$"\r\nЕсли вопрос не связан с темой \"{subjectArea}\", сообщите, что он выходит за рамки вашей компетенции." +
				$"\r\nВ ответе используйте данные только из базы знаний. Если ответ основан на конкретном источнике, укажите его." +
				$"\r\nОтвет должен быть в формате JSON:" +
				$"\r\n{{" +
				$"\r\n  \"needClarification\": <true, если вопрос требует уточнения, не по теме или некорректен; false, если уточнения не нужны>," +
				$"\r\n  \"response\": \"<ответ пользователю (пустое, если нужно уточнение)>\"," +
				$"\r\n  \"clarificationQuestion\": \"<уточняющий вопрос (пустое, если уточнение не требуется)>\"" +
				$"\r\n}}" +
				$"\r\nВот ваша база знаний:";

			foreach (var source in sources)
			{
				systemPrompt += $"{Environment.NewLine}{source}";
			}

			return systemPrompt;
		}


		public static string GetClassificationPrompt(List<string> types)
		{
			if (types is null || types.Count == 0)
			{
				return "Ошибка: список типов пуст. Классификация невозможна.";
			}

			var index = 0;
			var classificationPrompt =
				"Ты выступаешь в роли классификатора, который определяет тип сообщения пользователя на основе текущего и предыдущего ответов." +
				"\r\nТвой ответ должен содержать **только числа**, соответствующие категориям, разделенные `;`, если вопрос относится сразу к нескольким темам." +
				"\r\nЕсли вопрос четко соответствует одной категории, укажи только одно число." +
				"\r\nЕсли он относится сразу к нескольким категориям, укажи их все через `;`." +
				"\r\nЕсли вопрос **не относится ни к одной из категорий**, напиши `-1`." +
				"\r\nТы **не должен придумывать категории** и выходить за рамки перечисленных ниже вариантов.";

			foreach (var type in types)
			{
				classificationPrompt += $"\r\n{index}: {type}";
				index++;
			}

			return classificationPrompt;
		}

		public static string GetCleansingPrompt() =>
			"Тебе предоставлен список ответов на разные вопросы. Твоя задача:" +
			"\r\n- Объединить все ответы в единый связный текст, удаляя только избыточные повторы." +
			"\r\n- Составить ответ так, чтобы он был сжатым, логичным и емким, но при этом **не терял важные детали**." +
			"\r\n- **Не пропускай и не выкидывай никакую информацию**, если она важна для понимания." +
			"\r\n- Если в ответах встречаются противоречия, **представь оба варианта и укажи, что данные могут различаться**." +
			"\r\n- **Не добавляй информацию от себя, не придумывай и не интерпретируй данные иначе, чем они представлены**." +
			"\r\n- Итоговый ответ должен быть написан так, чтобы он был понятен без изучения исходных частей." +
			"\r\n- **Формат:** Связный текст без маркированных списков.";


		public static string GetQuestionSeparatingPrompt() =>
			"Ты должен проанализировать текст, который я тебе предоставлю, и выявить все содержащиеся в нем вопросы." +
			"\r\n- **Не добавляй ничего от себя**. Если вопрос плохо сформулирован и тебе не хватает контекста, оставь его без изменений." +
			"\r\n- **Каждый вопрос должен быть полным и самодостаточным** — он должен содержать всю необходимую информацию и **не ссылаться на другие вопросы**." +
			"\r\n- **Объединяй вопросы только в том случае**, если они полностью совпадают по смыслу. Если они просто похожи — **оставь их раздельно**." +
			"\r\n- **Соблюдай порядок вопросов**, в котором они даны пользователем." +
			"\r\n- **Если в тексте нет вопросов, верни пустую строку**." +
			"\r\n- **Формат вывода**: Все вопросы должны быть записаны в **одну строку, разделенные `;`** (точкой с запятой).";


		public static string GetSmallTalkPrompt() =>
			"Ты ассистент. Раздели сообщение пользователя на две части:\n\n" +
			"1. **Информационные вопросы** – выдели и оставь **только осмысленные вопросы**.\n" +
			"2. **Small talk** – если в сообщении есть приветствия, общие фразы, шутки, вежливые обращения и т. д., переработай их в **дружелюбный ответ**.\n\n" +

			"**Формат ответа:**\n" +
			"{\n" +
			"  \"QUESTIONS\": \"<Список вопросов через `;`, без small talk (если вопросов нет, укажи 'EMPTY')>\",\n" +
			"  \"SMALL_TALK\": \"<Дружелюбный ответ, основанный на small talk, если его нет – 'EMPTY'>\"\n" +
			"}\n\n" +

			"**Правила обработки:**\n" +
			"- **Не добавляй ничего от себя** – просто раздели сообщение на small talk и реальные вопросы.\n" +
			"- **Если small talk встроен в вопрос**, **удали его** и сохрани только вопрос.\n" +
			"- **Если small talk бессмысленный** (например, \"asdf 123\"), **проигнорируй его и верни 'SMALL_TALK: EMPTY'**.\n" +
			"- **Если в сообщении нет вопросов, 'QUESTIONS' должен быть 'EMPTY'.**\n" +
			"- **Если в сообщении нет small talk, 'SMALL_TALK' должен быть 'EMPTY'.**";
	}
}
