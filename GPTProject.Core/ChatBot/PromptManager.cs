namespace GPTProject.Core.ChatBot
{
	public static class PromptManager
	{
		public static string GetSystemPrompt(string subjectArea, List<string>? sources)
		{
			if (sources is null)
			{
				return "Пользователь задал некорректный вопрос. Ответь, что ты не можешь дать ответ, так как это выходит за рамки твоих возможностей.";
			}

			var systemPrompt =
				$"Вы — интеллектуальный помощник, обученный на базе знаний по теме \"{subjectArea}\". " +
				$"Отвечайте точно, кратко и строго на основе приведенных источников. " +
				$"Если информации недостаточно, запросите уточнение у пользователя. " +
				$"Не придумывайте данные и не делайте предположений." +

				$"\n\nКак обрабатывать вопросы:" +
				$"\n- Если в базе знаний есть однозначный ответ → дайте его." +
				$"\n- Если данных недостаточно → спросите уточнение, чтобы дать точный ответ." +
				$"\n- Если вопрос не относится к теме \"{subjectArea}\" → скажите, что он вне вашей компетенции." +

				$"\n\nФормат ответа (JSON):" +
				$"\n{{" +
				$"\n  \"needClarification\": <true, если требуется уточнение; false, если можно ответить сразу>," +
				$"\n  \"response\": \"<ответ пользователю (пустое, если нужно уточнение)>\"," +
				$"\n  \"clarificationQuestion\": \"<уточняющий вопрос (пустое, если уточнение не требуется)>\"" +
				$"\n}}" +

				$"\n\nБаза знаний:";

			foreach (var source in sources)
			{
				systemPrompt += $"{Environment.NewLine}{source}";
			}

			return systemPrompt;
		}


		public static string GetClassificationPrompt(Dictionary<string, string> metadata)
		{
			if (metadata is null || metadata.Count == 0)
			{
				return "Ошибка: список метаданных пуст. Классификация невозможна.";
			}

			var index = 1;
			var classificationPrompt =
				"Ты классификатор, который определяет, к какой категории относится вопрос пользователя." +
				"\r\nИспользуй только информацию из базы знаний, которую я тебе передам." +
				"\r\nОтвет должен содержать только номера соответствующих категорий, разделенные `;`." +
				"\r\nЕсли вопрос относится к нескольким категориям, укажи их все через `;`." +
				"\r\nЕсли вопрос не подходит ни к одной из категорий, напиши `-1`." +
				"\r\nТы не должен придумывать категории и выходить за рамки перечисленных ниже вариантов.\r\n" +
				"Вот доступные категории:\r\n";

			foreach (var kvp in metadata)
			{
				classificationPrompt += $"{index}: {kvp.Key}\r\n{kvp.Value}\r\n";
				index++;
			}

			classificationPrompt += "Проанализируй вопрос пользователя и выбери подходящие категории";

			return classificationPrompt;
		}

		public static string GetCleansingPrompt() =>
			"Тебе предоставлен список ответов на разные вопросы. Твоя задача:" +
			"\r\n- Объединить все ответы в единый связный текст, удаляя только избыточные повторы." +
			"\r\n- Составить ответ так, чтобы он был сжатым, логичным и емким, но при этом не терял важные детали." +
			"\r\n- Не пропускай и не выкидывай никакую информацию, если она важна для понимания." +
			"\r\n- Если в ответах встречаются противоречия, представь оба варианта и укажи, что данные могут различаться." +
			"\r\n- Не добавляй информацию от себя, не придумывай и не интерпретируй данные иначе, чем они представлены." +
			"\r\n- Итоговый ответ должен быть написан так, чтобы он был понятен без изучения исходных частей." +
			"\r\n- Формат: Связный текст без маркированных списков.";


		public static string GetQuestionSeparatingPrompt() =>
			"Ты анализируешь текст и выделяешь все содержащиеся в нем вопросы." +
			"\r\n- Не изменяй вопросы и не перефразируй их. Если вопрос плохо сформулирован или не хватает контекста, оставь его без изменений." +
			"\r\n- Каждый вопрос должен быть полным и самодостаточным. Он должен содержать всю необходимую информацию и не ссылаться на другие вопросы." +
			"\r\n- Не объединяй похожие вопросы. Объединение допускается только если они полностью идентичны." +
			"\r\n- Соблюдай исходный порядок вопросов. Не переставляй их местами." +
			"\r\n- Не добавляй ничего от себя. Если в тексте нет вопросов, верни пустую строку." +
			"\r\n- Формат вывода: вопросы записаны в одну строку, разделенные `;` (точкой с запятой), без дополнительных символов.";


		public static string GetSmallTalkPrompt(string subjectArea) =>
			$"Вы интеллектуальный помощник, специализирующийся на теме: \"{subjectArea}\".\n\n" +
			"Твоя задача – разделить сообщение пользователя на две части:\n" +
			"1. Информационные вопросы – четкие, осмысленные вопросы по теме, которые требуют ответа.\n" +
			"2. Small talk – любые фразы, не относящиеся к вопросам по теме, включая приветствия, шутки, вежливость и т. д.\n\n" +

			"Как обрабатывать сообщения:\n" +
			"- Не изменяй, не редактируй и не перефразируй вопросы. Они должны оставаться точно такими, как их задал пользователь.\n" +
			"- Если в вопрос встроен small talk, убери только его, но сам вопрос оставь без изменений.\n" +
			"- Если сообщение – это только small talk, верни 'QUESTIONS: EMPTY'.\n" +
			"- Если вопросов нет, верни 'SMALL_TALK: EMPTY'.\n\n" +

			"Формат ответа (только JSON!):\n" +
			"{\n" +
			"  \"QUESTIONS\": \"<Список вопросов через `;`, если их нет – 'EMPTY'>\",\n" +
			"  \"SMALL_TALK\": \"<Ответ на small talk, если его нет – 'EMPTY'>\"\n" +
			"}\n\n";
	}
}

//Ты помощник для создания базы знаний.  
//Я дам тебе текст сегмента, а ты составишь для него метаданные.  

//Формат ответа:  
//Название: { краткое название сегмента}
//Описание: { о чем этот сегмент, в 1 - 2 предложениях}
//Темы: { ключевые темы, разделенные `;`}
//Примеры вопросов: { несколько вопросов, на которые отвечает этот сегмент, через `;`}
//Что не включено: { чего здесь нет, чтобы не путать сегмент с другими}

//Текст сегмента:  
//{ сюда вставляем текст сегмента}

