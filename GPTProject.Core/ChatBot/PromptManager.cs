namespace GPTProject.Core.ChatBot
{
	public static class PromptManager
	{
		public static string GetSystemPrompt(string subjectArea, List<string>? sources)
		{
			if (sources is null)
			{
				return "Пользователь задал некорректный вопрос. Ответь, что ты не можешь дать ответ, так как это выходит за рамки твоих возможностей.";
			}

			var systemPrompt =
				$"Вы — интеллектуальный помощник, обученный на базе знаний по теме \"{subjectArea}\". " +
				$"Отвечайте кратко, строго по базе знаний, не добавляйте предположений. " +
				$"Если вопрос слишком общий или может иметь несколько вариантов ответа, обязательно запросите уточнение." +

				$"\nКак обрабатывать вопросы:" +
				$"\n- Если ответ ясен и однозначен → дайте краткий, точный ответ (не более 3 предложений)." +
				$"\n- Если вопрос общий или содержит несколько тем → не отвечайте сразу, а запросите уточнение." +
				$"\n- Если информации недостаточно → скажите, что её нет, не придумывайте ответ." +
				$"\n- Если вопрос не по теме \"{subjectArea}\" → сообщите об этом." +

				$"\nВажно: " +
				$"\n- Если требуется уточнение, не отвечайте частично – спросите уточняющий вопрос и ничего больше." +
				$"\n- Формулируйте уточнение так, чтобы оно помогло пользователю дать вам конкретный ответ." +

				$"\nФормат ответа:\n" +
				$"RESPONSE: <краткий ответ (если уточнение нужно, оставь пустым)>\n" +
				$"CLARIFICATION_QUESTION: <уточняющий вопрос (если не требуется, укажи 'EMPTY')>\n" +

				$"\n\nБаза знаний:";

			foreach (var source in sources)
			{
				systemPrompt += $"{Environment.NewLine}{source}";
			}

			return systemPrompt;
		}

		public static string GetClassicSystemPrompt(string subjectArea, List<string> sources)
		{
			var systemPrompt =
				$"Вы — интеллектуальный помощник, обученный на базе знаний по теме \"{subjectArea}\". " +
				$"Отвечайте строго по базе знаний, не добавляйте предположений." +
				$"\nБаза знаний:";

			foreach (var source in sources)
			{
				systemPrompt += $"{Environment.NewLine}{source}";
			}

			return systemPrompt;
		}


		public static string GetClassificationPrompt(Dictionary<string, string> metadata)
		{
			if (metadata is null || metadata.Count == 0)
			{
				return "Ошибка: список метаданных пуст. Классификация невозможна.";
			}

			var index = 1;
			var classificationPrompt =
				"Ты классификатор, который определяет, к какой категории относится вопрос пользователя." +
				"\r\nИспользуй только информацию из базы знаний, которую я тебе передам." +
				"\r\nОтвет должен содержать только номера соответствующих категорий, разделенные `;`." +
				"\r\nЕсли вопрос относится к нескольким категориям, укажи их все через `;`." +
				"\r\nЕсли вопрос не подходит ни к одной из категорий, напиши `-1`." +
				"\r\nТы не должен придумывать категории и выходить за рамки перечисленных ниже вариантов.\r\n" +
				"Вот доступные категории:\r\n";

			foreach (var kvp in metadata)
			{
				classificationPrompt += $"{index}: {kvp.Key}\r\n{kvp.Value}\r\n";
				index++;
			}

			classificationPrompt += "Проанализируй вопрос пользователя и выбери подходящие категории";

			return classificationPrompt;
		}

		public static string GetCleansingPrompt() =>
			"Тебе предоставлен список ответов на разные вопросы. Твоя задача:" +
			"\r\n- Объединить все ответы в единый связный текст, удаляя только избыточные повторы." +
			"\r\n- Составить ответ так, чтобы он был сжатым, логичным и емким, но при этом не терял важные детали." +
			"\r\n- Не пропускай и не выкидывай никакую информацию, если она важна для понимания." +
			"\r\n- Если в ответах встречаются противоречия, представь оба варианта и укажи, что данные могут различаться." +
			"\r\n- Не добавляй информацию от себя, не придумывай и не интерпретируй данные иначе, чем они представлены." +
			"\r\n- Итоговый ответ должен быть написан так, чтобы он был понятен без изучения исходных частей." +
			"\r\n- Формат: Связный текст без маркированных списков.";

		public static string GetQuestionSeparatingPrompt() =>
			"Ты анализируешь текст и выделяешь все содержащиеся в нем вопросы и запросы пользователя." +
			"\r\n- Вопросы – это фразы, которые явно требуют ответа (например, начинаются с \"Что\", \"Как\", \"Почему\" и т. д.)." +
			"\r\n- Запросы – это фразы, которые не сформулированы как вопросы, но требуют информации (например, \"Расскажи о динозаврах\", \"Опиши трицератопса\")." +
			"\r\n- Не изменяй, не исправляй и не перефразируй вопросы и запросы. Оставляй их в точности такими, как задал пользователь." +
			"\r\n- Каждый вопрос и запрос должен быть полным и самодостаточным, не ссылаясь на другие вопросы или контекст." +
			"\r\n- Не объединяй похожие вопросы и запросы, только если они полностью идентичны." +
			"\r\n- Соблюдай исходный порядок вопросов и запросов, не переставляй их местами." +
			"\r\n- Не добавляй ничего от себя. Если в тексте нет вопросов и запросов, верни пустую строку." +
			"\r\n- Формат вывода: все вопросы и запросы записаны в одну строку, разделенные `;` (точкой с запятой), без дополнительных символов.";

		public static string GetSmallTalkPrompt(string subjectArea) =>
			$"Вы интеллектуальный помощник, специализирующийся на теме: \"{subjectArea}\".\n" +
			"Твоя задача – разделить сообщение пользователя на две части:\n" +
			"1. Информационные вопросы – осмысленные вопросы или запросы по теме, которые требуют ответа.\n" +
			"2. Small talk – приветствия, шутки, вежливые фразы, не относящиеся к теме.\n\n" +
			"Как обрабатывать сообщения:\n" +
			"- Не изменяй, не редактируй и не перефразируй вопросы. Оставляй их в точности такими, как задал пользователь.\n" +
			"- Короткие запросы по теме (\"А целлюр?\") – это тоже вопросы, не удаляй их.\n" +
			"- Если в вопрос встроен small talk, убери только его, но оставь сам вопрос.\n" +
			"- Если сообщение – это только small talk и не содержит ни одного осмысленного вопроса, верни 'QUESTIONS: EMPTY'.\n" +
			"- Если вопросов нет, верни 'SMALL_TALK: EMPTY'.\n" +
			"Формат ответа:\n" +
			"QUESTIONS: <список вопросов через `;`, если их нет – 'EMPTY'>\n" +
			"SMALL_TALK: <ответ на small talk, если его нет – 'EMPTY'>\n";
		}
}

//Ты помощник для создания базы знаний.  
//Я дам тебе текст сегмента, а ты составишь для него метаданные.  

//Формат ответа:  
//Название: { краткое название сегмента}
//Описание: { о чем этот сегмент, в 1 - 2 предложениях}
//Темы: { ключевые темы, разделенные `;`}
//Примеры вопросов: { несколько вопросов, на которые отвечает этот сегмент, через `;`}
//Что не включено: { чего здесь нет, чтобы не путать сегмент с другими}

//Текст сегмента:  
//{ сюда вставляем текст сегмента}

